# MYSHELL -- Simple Application of Linux Shell

 myshell 是用C语言编写的一个简单 shell 程序，能够解析用户的输入并执行对应的功能，从而完成用户与 Linux 系统的交互。同时， myshell 程序还支持输入输出重定向以及多进程后台执行。

## 运行环境

 - Ubuntu 20.04（Linux ubuntu 5.13.0-37-generic）
 - gcc version 9.4.0

## 开始

 将 myshell 源程序```myshell.c```和```makefile```放在同一目录下，并在此目录打开终端，执行以下命令进行编译：

 ```
 make
 ```

 编译完成后，执行

 ```
 ./myshell
 ```

 进入 myshell 程序。 myshell 工具将当前目录后缀上```==>```作为提示符。在提示符之后输入想要执行的指令，按```Enter```键运行。

 如果 myshell 程序在使用时带有参数，那么 myshell 可以从参数指定的文件中读取指令，并依次执行。例如，当我们这样使用 myshell 时：

 ```
 ./myshell batchfile
 ```

 那么，我们会依次读取```batchfile```文件的每一行并执行。当读取到文件的最后一行时， myshell 自动退出。

## 环境变量

 在 Linux Shell 登录成功以后，Linux 会从文件中获取一系列的数据为该次登录所用，这些数据会在某些指令或某些程序中被使用到，这些数据被称为 Linux Shell 运行时的环境。变量是计算机系统用于保存可变值的数据类型，我们可以直接通过变量名称来提取到对应的变量值。在 Linux 系统中，环境变量是用来定义系统运行环境的一些参数，比如当前路径（PWD）、邮件存放位置（MAIL）等。

 myshell 的环境变量中应该包含```shell=<pathname>/myshell```，其中```<pathname>/myshell```是 myshell 工具的绝对路径。

## 内部指令

 myshell 支持以下内部指令：

 - ```cd <directory>```：从当前的默认目录跳转到指定的目录```directory```，如果成功，修改环境变量```PWD```。
     - 如果没有指定参数```directory```，则输出当前目录。
     - 如果```directory```目录不存在，则输出错误信息。
 - ```clr```：清空屏幕上的显示内容。
 - ```dir <directory>```：输出目录```directory```下的所有目录，包括目录和文件。
 - ```environ```：输出所有的环境变量。
 - ```echo <comment>```：输出```comment```的具体内容并换行。
     - 当```comment```的内容出现多个 space 或 tab 时，应该压缩为一个space。
 - ```help```：输出用户指南。
 - ```pause```：停止 myshell 的执行，直到用户按下```Enter```键。
 - ```quit```：退出myshell。

 可以这样执行 myshell 的内部指令，我们期望所有的命令行参数（包括重定向符号```<```、```>```、```>>```以及后台执行符号```&```）通过空格（一个或多个 space 和 tab ）与其他命令行参数分隔开：

 ```
 cd .. // 返回上一级目录
 ```

## 系统指令

 myshell 同时支持其他 Linux 系统指令，这些指令通过调用```fork```与```exec```完成。父进程通过```fork```生成子进程，子进程调用```execvp```方法执行用户指令。

 另外，子进程在执行时包含环境变量```parent=<pathname>/myshell```，其中```<pathname>/myshell```是 myshell 工具的绝对路径。

 可以这样执行 myshell 的系统指令，我们期望所有的命令行参数（包括重定向符号```<```、```>```、```>>```以及后台执行符号```&```）通过空格（一个或多个 space 和 tab ）与其他命令行参数分隔开：

 ```
 ls -al // 输出当前目录下所有文件的信息
 ```

## 输入输出重定向

 myshell 同时支持输入输出重定向。例如，当我们在 myshell 中执行以下指令：

 ```
 programname arg1 arg2 < inputfile > outputfile
 ```

 或以下指令：

 ```
 programname arg1 arg2 < inputfile >> outputfile
 ```

 就会将输入重定向为```inputfile```，将输出重定向为```outputfile```。

 其中，```programname```是可执行指令，```arg*```是该指令的参数。该指令从```inputfile```中获取用户输入，而不是标准输入```stdin```；指令执行的结果会输出到```outputfile```，而不是标准输出```stdout```。

 输入重定向会和```sort```等支持文件输入的系统指令共同使用，用户输入会重定向到指定文件中。例如```sort < inputfile```的输入应该从文件```inputfile```中读取。输出重定向会和```dir```、```environ```、```echo```、```help```含有输出的内部指令以及含有输出的系统指令共同使用，输出结果会重定向到用户指定文件中。例如，```help > outputfile```的执行结果应该输出到文件```outputfile```。

 当使用输出重定向时，
 - 如果表示重定向的字符是```>```，
     - 如果```outputfile```文件不存在，则新建文件。
     - 如果```outputfile```文件存在，那么输出会覆盖原文件。
 - 如果表示重定向的字符是```>>```，
     - 如果```outputfile```文件不存在，则新建文件。
     - 如果```outputfile```文件存在，那么输出添加到原文件后面。

## 后台执行

 myshell 可以支持后台任务的执行。当一条指令后面有```&```符号时， myshell 不需要等待该指令执行结束才能返回。后台执行可用于 myshell 内部指令以及系统指令。

 可以这样执行后台任务，我们期望所有的命令行参数（包括重定向符号```<```、```>```、```>>```以及后台执行符号```&```）通过空格（一个或多个 space 和 tab ）与其他命令行参数分隔开：

 ```
 programname arg1 arg2 &
 ```

 其中，```programname```是可执行指令，```arg*```是该指令的参数。
